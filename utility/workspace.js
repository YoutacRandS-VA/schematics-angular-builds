"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.allTargetOptions = exports.allWorkspaceTargets = exports.createDefaultPath = exports.buildDefaultPath = exports.getWorkspace = exports.updateWorkspace = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const workspace_models_1 = require("./workspace-models");
function createHost(tree) {
    return {
        async readFile(path) {
            return tree.readText(path);
        },
        async writeFile(path, data) {
            return tree.overwrite(path, data);
        },
        async isDirectory(path) {
            // approximate a directory check
            return !tree.exists(path) && tree.getDir(path).subfiles.length > 0;
        },
        async isFile(path) {
            return tree.exists(path);
        },
    };
}
function updateWorkspace(updaterOrWorkspace) {
    return async (tree) => {
        const host = createHost(tree);
        if (typeof updaterOrWorkspace === 'function') {
            const { workspace } = await core_1.workspaces.readWorkspace('/', host);
            const result = await updaterOrWorkspace(workspace);
            await core_1.workspaces.writeWorkspace(workspace, host);
            return result || schematics_1.noop;
        }
        else {
            await core_1.workspaces.writeWorkspace(updaterOrWorkspace, host);
            return schematics_1.noop;
        }
    };
}
exports.updateWorkspace = updateWorkspace;
async function getWorkspace(tree, path = '/') {
    const host = createHost(tree);
    const { workspace } = await core_1.workspaces.readWorkspace(path, host);
    return workspace;
}
exports.getWorkspace = getWorkspace;
/**
 * Build a default project path for generating.
 * @param project The project which will have its default path generated.
 */
function buildDefaultPath(project) {
    const root = project.sourceRoot ? `/${project.sourceRoot}/` : `/${project.root}/src/`;
    const projectDirName = project.extensions['projectType'] === workspace_models_1.ProjectType.Application ? 'app' : 'lib';
    return `${root}${projectDirName}`;
}
exports.buildDefaultPath = buildDefaultPath;
async function createDefaultPath(tree, projectName) {
    const workspace = await getWorkspace(tree);
    const project = workspace.projects.get(projectName);
    if (!project) {
        throw new Error(`Project "${projectName}" does not exist.`);
    }
    return buildDefaultPath(project);
}
exports.createDefaultPath = createDefaultPath;
function* allWorkspaceTargets(workspace) {
    for (const [projectName, project] of workspace.projects) {
        for (const [targetName, target] of project.targets) {
            yield [targetName, target, projectName, project];
        }
    }
}
exports.allWorkspaceTargets = allWorkspaceTargets;
function* allTargetOptions(target, skipBaseOptions = false) {
    if (!skipBaseOptions && target.options) {
        yield [undefined, target.options];
    }
    if (!target.configurations) {
        return;
    }
    for (const [name, options] of Object.entries(target.configurations)) {
        if (options !== undefined) {
            yield [name, options];
        }
    }
}
exports.allTargetOptions = allTargetOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NwYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvc2NoZW1hdGljcy9hbmd1bGFyL3V0aWxpdHkvd29ya3NwYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILCtDQUF3RDtBQUN4RCwyREFBOEQ7QUFDOUQseURBQWlEO0FBRWpELFNBQVMsVUFBVSxDQUFDLElBQVU7SUFDNUIsT0FBTztRQUNMLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBWTtZQUN6QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQztRQUNELEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBWSxFQUFFLElBQVk7WUFDeEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFZO1lBQzVCLGdDQUFnQztZQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQVk7WUFDdkIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQU1ELFNBQWdCLGVBQWUsQ0FDN0Isa0JBRTJGO0lBRTNGLE9BQU8sS0FBSyxFQUFFLElBQVUsRUFBRSxFQUFFO1FBQzFCLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU5QixJQUFJLE9BQU8sa0JBQWtCLEtBQUssVUFBVSxFQUFFO1lBQzVDLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FB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LE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUM7QUFqQkQsNENBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IGpzb24sIHdvcmtzcGFjZXMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBSdWxlLCBUcmVlLCBub29wIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L3NjaGVtYXRpY3MnO1xuaW1wb3J0IHsgUHJvamVjdFR5cGUgfSBmcm9tICcuL3dvcmtzcGFjZS1tb2RlbHMnO1xuXG5mdW5jdGlvbiBjcmVhdGVIb3N0KHRyZWU6IFRyZWUpOiB3b3Jrc3BhY2VzLldvcmtzcGFjZUhvc3Qge1xuICByZXR1cm4ge1xuICAgIGFzeW5jIHJlYWRGaWxlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICByZXR1cm4gdHJlZS5yZWFkVGV4dChwYXRoKTtcbiAgICB9LFxuICAgIGFzeW5jIHdyaXRlRmlsZShwYXRoOiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIHRyZWUub3ZlcndyaXRlKHBhdGgsIGRhdGEpO1xuICAgIH0sXG4gICAgYXN5bmMgaXNEaXJlY3RvcnkocGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAvLyBhcHByb3hpbWF0ZSBhIGRpcmVjdG9yeSBjaGVja1xuICAgICAgcmV0dXJuICF0cmVlLmV4aXN0cyhwYXRoKSAmJiB0cmVlLmdldERpcihwYXRoKS5zdWJmaWxlcy5sZW5ndGggPiAwO1xuICAgIH0sXG4gICAgYXN5bmMgaXNGaWxlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgcmV0dXJuIHRyZWUuZXhpc3RzKHBhdGgpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVXb3Jrc3BhY2UoXG4gIHVwZGF0ZXI6ICh3b3Jrc3BhY2U6IHdvcmtzcGFjZXMuV29ya3NwYWNlRGVmaW5pdGlvbikgPT4gdm9pZCB8IFJ1bGUgfCBQcm9taXNlTGlrZTx2b2lkIHwgUnVsZT4sXG4pOiBSdWxlO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVdvcmtzcGFjZSh3b3Jrc3BhY2U6IHdvcmtzcGFjZXMuV29ya3NwYWNlRGVmaW5pdGlvbik6IFJ1bGU7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlV29ya3NwYWNlKFxuICB1cGRhdGVyT3JXb3Jrc3BhY2U6XG4gICAgfCB3b3Jrc3BhY2VzLldvcmtzcGFjZURlZmluaXRpb25cbiAgICB8ICgod29ya3NwYWNlOiB3b3Jrc3BhY2VzLldvcmtzcGFjZURlZmluaXRpb24pID0+IHZvaWQgfCBSdWxlIHwgUHJvbWlzZUxpa2U8dm9pZCB8IFJ1bGU+KSxcbik6IFJ1bGUge1xuICByZXR1cm4gYXN5bmMgKHRyZWU6IFRyZWUpID0+IHtcbiAgICBjb25zdCBob3N0ID0gY3JlYXRlSG9zdCh0cmVlKTtcblxuICAgIGlmICh0eXBlb2YgdXBkYXRlck9yV29ya3NwYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCB7IHdvcmtzcGFjZSB9ID0gYXdhaXQgd29ya3NwYWNlcy5yZWFkV29ya3NwYWNlKCcvJywgaG9zdCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVwZGF0ZXJPcldvcmtzcGFjZSh3b3Jrc3BhY2UpO1xuXG4gICAgICBhd2FpdCB3b3Jrc3BhY2VzLndyaXRlV29ya3NwYWNlKHdvcmtzcGFjZSwgaG9zdCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQgfHwgbm9vcDtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgd29ya3NwYWNlcy53cml0ZVdvcmtzcGFjZSh1cGRhdGVyT3JXb3Jrc3BhY2UsIGhvc3QpO1xuXG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRXb3Jrc3BhY2UodHJlZTogVHJlZSwgcGF0aCA9ICcvJykge1xuICBjb25zdCBob3N0ID0gY3JlYXRlSG9zdCh0cmVlKTtcblxuICBjb25zdCB7IHdvcmtzcGFjZSB9ID0gYXdhaXQgd29ya3NwYWNlcy5yZWFkV29ya3NwYWNlKHBhdGgsIGhvc3QpO1xuXG4gIHJldHVybiB3b3Jrc3BhY2U7XG59XG5cbi8qKlxuICogQnVpbGQgYSBkZWZhdWx0IHByb2plY3QgcGF0aCBmb3IgZ2VuZXJhdGluZy5cbiAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHdoaWNoIHdpbGwgaGF2ZSBpdHMgZGVmYXVsdCBwYXRoIGdlbmVyYXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFBhdGgocHJvamVjdDogd29ya3NwYWNlcy5Qcm9qZWN0RGVmaW5pdGlvbik6IHN0cmluZyB7XG4gIGNvbnN0IHJvb3QgPSBwcm9qZWN0LnNvdXJjZVJvb3QgPyBgLyR7cHJvamVjdC5zb3VyY2VSb290fS9gIDogYC8ke3Byb2plY3Qucm9vdH0vc3JjL2A7XG4gIGNvbnN0IHByb2plY3REaXJOYW1lID1cbiAgICBwcm9qZWN0LmV4dGVuc2lvbnNbJ3Byb2plY3RUeXBlJ10gPT09IFByb2plY3RUeXBlLkFwcGxpY2F0aW9uID8gJ2FwcCcgOiAnbGliJztcblxuICByZXR1cm4gYCR7cm9vdH0ke3Byb2plY3REaXJOYW1lfWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0UGF0aCh0cmVlOiBUcmVlLCBwcm9qZWN0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3Qgd29ya3NwYWNlID0gYXdhaXQgZ2V0V29ya3NwYWNlKHRyZWUpO1xuICBjb25zdCBwcm9qZWN0ID0gd29ya3NwYWNlLnByb2plY3RzLmdldChwcm9qZWN0TmFtZSk7XG4gIGlmICghcHJvamVjdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgUHJvamVjdCBcIiR7cHJvamVjdE5hbWV9XCIgZG9lcyBub3QgZXhpc3QuYCk7XG4gIH1cblxuICByZXR1cm4gYnVpbGREZWZhdWx0UGF0aChwcm9qZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBhbGxXb3Jrc3BhY2VUYXJnZXRzKFxuICB3b3Jrc3BhY2U6IHdvcmtzcGFjZXMuV29ya3NwYWNlRGVmaW5pdGlvbixcbik6IEl0ZXJhYmxlPFtzdHJpbmcsIHdvcmtzcGFjZXMuVGFyZ2V0RGVmaW5pdGlvbiwgc3RyaW5nLCB3b3Jrc3BhY2VzLlByb2plY3REZWZpbml0aW9uXT4ge1xuICBmb3IgKGNvbnN0IFtwcm9qZWN0TmFtZSwgcHJvamVjdF0gb2Ygd29ya3NwYWNlLnByb2plY3RzKSB7XG4gICAgZm9yIChjb25zdCBbdGFyZ2V0TmFtZSwgdGFyZ2V0XSBvZiBwcm9qZWN0LnRhcmdldHMpIHtcbiAgICAgIHlpZWxkIFt0YXJnZXROYW1lLCB0YXJnZXQsIHByb2plY3ROYW1lLCBwcm9qZWN0XTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBhbGxUYXJnZXRPcHRpb25zKFxuICB0YXJnZXQ6IHdvcmtzcGFjZXMuVGFyZ2V0RGVmaW5pdGlvbixcbiAgc2tpcEJhc2VPcHRpb25zID0gZmFsc2UsXG4pOiBJdGVyYWJsZTxbc3RyaW5nIHwgdW5kZWZpbmVkLCBSZWNvcmQ8c3RyaW5nLCBqc29uLkpzb25WYWx1ZSB8IHVuZGVmaW5lZD5dPiB7XG4gIGlmICghc2tpcEJhc2VPcHRpb25zICYmIHRhcmdldC5vcHRpb25zKSB7XG4gICAgeWllbGQgW3VuZGVmaW5lZCwgdGFyZ2V0Lm9wdGlvbnNdO1xuICB9XG5cbiAgaWYgKCF0YXJnZXQuY29uZmlndXJhdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IFtuYW1lLCBvcHRpb25zXSBvZiBPYmplY3QuZW50cmllcyh0YXJnZXQuY29uZmlndXJhdGlvbnMpKSB7XG4gICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgeWllbGQgW25hbWUsIG9wdGlvbnNdO1xuICAgIH1cbiAgfVxufVxuIl19