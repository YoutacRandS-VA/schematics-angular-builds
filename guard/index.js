"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const generate_from_files_1 = require("../utility/generate-from-files");
const schema_1 = require("./schema");
function default_1(options) {
    if (!options.implements) {
        throw new schematics_1.SchematicsException('Option "implements" is required.');
    }
    const implementations = options.implements
        .map((implement) => (implement === 'CanDeactivate' ? 'CanDeactivate<unknown>' : implement))
        .join(', ');
    const commonRouterNameImports = ['ActivatedRouteSnapshot', 'RouterStateSnapshot'];
    const routerNamedImports = [...options.implements, 'UrlTree'];
    if (options.implements.includes(schema_1.Implement.CanLoad) ||
        options.implements.includes(schema_1.Implement.CanMatch)) {
        routerNamedImports.push('Route', 'UrlSegment');
        if (options.implements.length > 1) {
            routerNamedImports.push(...commonRouterNameImports);
        }
    }
    else {
        routerNamedImports.push(...commonRouterNameImports);
    }
    routerNamedImports.sort();
    const implementationImports = routerNamedImports.join(', ');
    return (0, generate_from_files_1.generateFromFiles)(options, {
        implementations,
        implementationImports,
    });
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zY2hlbWF0aWNzL2FuZ3VsYXIvZ3VhcmQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUFFSCwyREFBdUU7QUFDdkUsd0VBQW1FO0FBQ25FLHFDQUErRTtBQUUvRSxtQkFBeUIsT0FBcUI7SUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDdkIsTUFBTSxJQUFJLGdDQUFtQixDQUFDLGtDQUFrQyxDQUFDLENBQUM7S0FDbkU7SUFFRCxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsVUFBVTtTQUN2QyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxLQUFLLGVBQWUsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzFGLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNkLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sa0JBQWtCLEdBQWEsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFeEUsSUFDRSxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxrQkFBYyxDQUFDLE9BQU8sQ0FBQztRQUNuRCxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxrQkFBYyxDQUFDLFFBQVEsQ0FBQyxFQUNwRDtRQUNBLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFL0MsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDakMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsdUJBQXVCLENBQUMsQ0FBQztTQUNyRDtLQUNGO1NBQU07UUFDTCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxDQUFDO0tBQ3JEO0lBRUQsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFMUIsTUFBTSxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFNUQsT0FBTyxJQUFBLHVDQUFpQixFQUFDLE9BQU8sRUFBRTtRQUNoQyxlQUFlO1FBQ2YscUJBQXFCO0tBQ3RCLENBQUMsQ0FBQztBQUNMLENBQUM7QUFoQ0QsNEJBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IFJ1bGUsIFNjaGVtYXRpY3NFeGNlcHRpb24gfSBmcm9tICdAYW5ndWxhci1kZXZraXQvc2NoZW1hdGljcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZUZyb21GaWxlcyB9IGZyb20gJy4uL3V0aWxpdHkvZ2VuZXJhdGUtZnJvbS1maWxlcyc7XG5pbXBvcnQgeyBJbXBsZW1lbnQgYXMgR3VhcmRJbnRlcmZhY2UsIFNjaGVtYSBhcyBHdWFyZE9wdGlvbnMgfSBmcm9tICcuL3NjaGVtYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvcHRpb25zOiBHdWFyZE9wdGlvbnMpOiBSdWxlIHtcbiAgaWYgKCFvcHRpb25zLmltcGxlbWVudHMpIHtcbiAgICB0aHJvdyBuZXcgU2NoZW1hdGljc0V4Y2VwdGlvbignT3B0aW9uIFwiaW1wbGVtZW50c1wiIGlzIHJlcXVpcmVkLicpO1xuICB9XG5cbiAgY29uc3QgaW1wbGVtZW50YXRpb25zID0gb3B0aW9ucy5pbXBsZW1lbnRzXG4gICAgLm1hcCgoaW1wbGVtZW50KSA9PiAoaW1wbGVtZW50ID09PSAnQ2FuRGVhY3RpdmF0ZScgPyAnQ2FuRGVhY3RpdmF0ZTx1bmtub3duPicgOiBpbXBsZW1lbnQpKVxuICAgIC5qb2luKCcsICcpO1xuICBjb25zdCBjb21tb25Sb3V0ZXJOYW1lSW1wb3J0cyA9IFsnQWN0aXZhdGVkUm91dGVTbmFwc2hvdCcsICdSb3V0ZXJTdGF0ZVNuYXBzaG90J107XG4gIGNvbnN0IHJvdXRlck5hbWVkSW1wb3J0czogc3RyaW5nW10gPSBbLi4ub3B0aW9ucy5pbXBsZW1lbnRzLCAnVXJsVHJlZSddO1xuXG4gIGlmIChcbiAgICBvcHRpb25zLmltcGxlbWVudHMuaW5jbHVkZXMoR3VhcmRJbnRlcmZhY2UuQ2FuTG9hZCkgfHxcbiAgICBvcHRpb25zLmltcGxlbWVudHMuaW5jbHVkZXMoR3VhcmRJbnRlcmZhY2UuQ2FuTWF0Y2gpXG4gICkge1xuICAgIHJvdXRlck5hbWVkSW1wb3J0cy5wdXNoKCdSb3V0ZScsICdVcmxTZWdtZW50Jyk7XG5cbiAgICBpZiAob3B0aW9ucy5pbXBsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJvdXRlck5hbWVkSW1wb3J0cy5wdXNoKC4uLmNvbW1vblJvdXRlck5hbWVJbXBvcnRzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcm91dGVyTmFtZWRJbXBvcnRzLnB1c2goLi4uY29tbW9uUm91dGVyTmFtZUltcG9ydHMpO1xuICB9XG5cbiAgcm91dGVyTmFtZWRJbXBvcnRzLnNvcnQoKTtcblxuICBjb25zdCBpbXBsZW1lbnRhdGlvbkltcG9ydHMgPSByb3V0ZXJOYW1lZEltcG9ydHMuam9pbignLCAnKTtcblxuICByZXR1cm4gZ2VuZXJhdGVGcm9tRmlsZXMob3B0aW9ucywge1xuICAgIGltcGxlbWVudGF0aW9ucyxcbiAgICBpbXBsZW1lbnRhdGlvbkltcG9ydHMsXG4gIH0pO1xufVxuIl19